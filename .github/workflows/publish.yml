name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags: ['\d+.\d+.\d+((a|b|rc)(\d+)?)?']

jobs:
  build-n-publish:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        .
    - name: Compare git tag to pyproject version
      if: github.event_name == 'push'
      run: |
        version_pyproject=$(grep -Po 'version = "\K[^"]*' pyproject.toml)
        version_gittag=${{github.ref_name}}
        if [[ "${version_pyproject}" != "${version_gittag}" ]]; then
          echo "Version from pyproject '${version_pyproject}' is not equal to git tag '${version_gittag}'";
          exit 1;
        fi
        echo "version=$version_gittag" >> $GITHUB_ENV
    - name: Publish distribution to Test PyPI
      if: github.event_name == 'push'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Create Draft Release
      if: github.event_name == 'push'
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts:
          - dist/yalafi*.whl
          - dist/yalafi*.tar.gz
        draft: true
        name: Draft Release ${{ env.version }}
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token

    - name: Publish distribution to PyPI
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  testPyPi-install:
    if: github.event_name == 'push'
    needs: build-n-publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Test install from test.PyPI
        run: |
          version_gittag=${{github.ref_name}}
          pip install -i https://test.pypi.org/simple/ yalafi==${version_gittag}
      - name : Test after removing local yalafi folder
        run: |
          python -c "import yalafi"
          python -c "import yalafi.shell"
